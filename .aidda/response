File: /home/stevegt/lab/grid-cli/v2/doc/201-ism.md
```markdown
# Infinite State Machines (ISMs) in Sequence Completion for PromiseGrid

## Introduction

In PromiseGrid, an Infinite State Machine (ISM) facilitates dynamic sequence handling and completion with an unlimited set of states, offering flexible computation and data management. This document outlines ISM principles, sequence completion using "what's next" assertions within a decentralized graph, and the graph's function as the ISM's execution journal.

### Agent Assertions and Promises

- **Assertions as Promises**: Agents formalize assertions as promises, representing the next event, state, or both in the sequence.
- **Reputation Staking**: Making a promise stakes an agentâ€™s reputation (currency value) on its assertion's accuracy.
- **Reciprocal Promises**: Agents respond to each other's assertions, forming a network of states and transitions.
- **Conflict Resolution**: In case of conflicting assertions, agents prioritize based on asserters' currency values, reflecting reputation and reliability.
- **Economic Weighting**: Trusted and reputable agents have their assertions prioritized, ensuring system stability and trustworthiness.
- **Voluntary Collaboration**: Assertions are voluntary promises, fostering trust and collaboration within the network, unlike traditional directed function calls.

## Understanding Infinite State Machines (ISMs)

### What is an ISM?

An ISM extends finite state machines by allowing unlimited states and transitions.

#### Key Characteristics:

1. **Unbounded States**: ISMs create and transition to new states as needed.
2. **Dynamic Transitions**: Transitions depend on events and the current state, enabling adaptive behavior.
3. **Self-Modifying Execution**: ISMs can alter their structure and behavior during execution to handle complex tasks.

#### Assertion Message Structure

An assertion message is structured as the tuple `(m1, in, errin, out, errout, rc, m2)`, where:
- `m1`: Current message or state identifier.
- `in`: Input data or event triggering the transition.
- `errin`: Input error data, if any.
- `out`: Output data resulting from the transition.
- `errout`: Output error data, if any.
- `rc`: Return code indicating success or specific error conditions.
- `m2`: Next message or state identifier.

### ISM Programming Language

The language used to program ISMs is based on statements defined by the tuple `(m1, in, errin, out, errout, rc, m2)`. Each element of the tuple can be a variable, allowing for flexible and dynamic state definitions. This structure enables developers to define transitions, handle inputs and outputs, manage errors, and dictate the flow of states within the ISM.

#### Recursion in ISMs

Recursion in the ISM language allows states to invoke themselves or other states through their tuple definitions. By referencing previous states (`m1` or `m2`) within new assertions, ISMs can perform iterative computations and handle repetitive tasks. This recursive capability ensures that complex sequences and computations can be managed efficiently without predefined limitations on the depth or complexity of operations.

### Are ISMs Turing-Equivalent?

With unbounded states and transitions, ISMs can be Turing-equivalent, capable of performing any computation a Turing machine can, given sufficient resources.

#### Turing Equivalence:

1. **Unbounded Memory**: ISMs simulate a Turing machine's tape by dynamically creating states.
2. **Conditional Transitions**: Conditional logic allows for iterative and recursive computations.
3. **Halting Behavior**: The universe does not halt, but agents may need to assert "there is no next state".

## Sequence Completion in ISMs

### Implementing Sequence Completion

PromiseGrid utilizes "what's next" assertions within a decentralized graph structure to complete sequences. This approach allows for distributed prediction and execution of the next state based on the current state and event.

#### Decentralized Graph Structure:

- **Distributed Nodes**: The graph is maintained across multiple agents, preventing single points of failure.
- **Consensus Mechanism**: Agents only build on state transitions they agree with, minimizing branching. Agents can use a "merging machine" to merge two or more branches, creating a new machine, enabling convergence.
- **Scalability**: Decentralization allows the system to scale seamlessly as more agents participate.

#### Assertions of "What's Next":

1. **Graph Representation**: Sequences are paths in a graph, with nodes as states and edges as transitions.
2. **Dynamic Assertions**: Possible transitions are asserted based on current inputs, guiding completion.
3. **Path Selection**: The most probable path is chosen based on historical data and context for efficient completion.

### ISM Transitions as "What's Next" Predictions

Each ISM transition acts as a "what's next" prediction within the graph structure.

### PromiseGrid as an ISM

PromiseGrid functions as an ISM.
```
EOF_/home/stevegt/lab/grid-cli/v2/doc/201-ism.md