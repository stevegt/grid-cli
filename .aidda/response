File: /home/stevegt/lab/grid-cli/v2/doc/201-ism.md
```markdown
# Infinite State Machines (ISMs) in Sequence Completion for PromiseGrid

## Introduction

In PromiseGrid, an Infinite State Machine (ISM) manages dynamic sequences with unlimited states, enabling flexible computation and data handling. This document explains ISM principles, sequence completion using "what's next" assertions within a decentralized graph, and the graph's role as the ISM's execution journal.

### Agent Assertions and Promises

- **Assertions as Promises**: Agents express promises representing the next event or state.
- **Reputation Staking**: Promises stake an agentâ€™s reputation on their accuracy.
- **Reciprocal Promises**: Agents form a network through mutual assertions.
- **Conflict Resolution**: Conflicts are resolved based on agents' reputation.
- **Economic Weighting**: Reputable agents have prioritized assertions, ensuring trust.
- **Voluntary Collaboration**: Assertions foster trust and collaboration, unlike traditional function calls.

## Understanding Infinite State Machines (ISMs)

### What is an ISM?

An ISM extends finite state machines with unlimited states and transitions.

#### Key Characteristics:

1. **Unbounded States**: New states are created as needed.
2. **Dynamic Transitions**: Transitions depend on events and current state.
3. **Self-Modifying Execution**: ISMs can alter their structure during execution for complex tasks.

#### Assertion Message Structure

An assertion message is `(m1, in, errin, out, errout, rc, m2)`:
- `m1`: Current state.
- `in`: Input data/event.
- `errin`: Input errors.
- `out`: Output data.
- `errout`: Output errors.
- `rc`: Return code.
- `m2`: Next state.

### ISM Programming Language

Programming ISMs involves defining state transitions using the assertion tuple. Variables allow dynamic state definitions, enabling transitions, input/output handling, error management, and state flow control.

#### Recursion in ISMs

Recursion allows states to invoke themselves or other states via their tuple definitions. By referencing `m1` or `m2` in new assertions, ISMs perform iterative computations and handle repetitive tasks efficiently.

**Example of Recursion in ISM Language:**

```ism
# Recursive state to calculate factorial
(m1: "Start", in: n, errin: null, out: null, errout: null, rc: "Compute", m2: "Compute")

(m2: "Compute", in: n, errin: null, out: null, errout: null, rc: "Multiply", m2: "Multiply")

(m2: "Multiply", in: result, errin: null, out: factorial, errout: null, rc: "End", m2: "End")

(m2: "End", in: null, errin: null, out: factorial, errout: null, rc: "Complete", m2: "Start") # Recursion point
```

## Are ISMs Turing-Equivalent?

With unlimited states and transitions, ISMs can perform any computation a Turing machine can, given sufficient resources.

#### Turing Equivalence:

1. **Unbounded Memory**: ISMs simulate a Turing machine's tape with dynamic states.
2. **Conditional Transitions**: Enable iterative and recursive computations.
3. **Halting Behavior**: Agents may assert "no next state" to halt.

## Sequence Completion in ISMs

### Implementing Sequence Completion

PromiseGrid uses "what's next" assertions within a decentralized graph to complete sequences, enabling distributed prediction and execution based on current state and events.

#### Decentralized Graph Structure:

- **Distributed Nodes**: Maintained by multiple agents to avoid single points of failure.
- **Consensus Mechanism**: Agents agree on state transitions, minimizing branching. A "merging machine" integrates branches, ensuring convergence.
- **Scalability**: Decentralization supports seamless scaling with more agents.

#### Assertions of "What's Next":

1. **Graph Representation**: Sequences are graph paths with nodes as states and edges as transitions.
2. **Dynamic Assertions**: Transitions are asserted based on inputs, guiding sequence completion.
3. **Path Selection**: The most probable path is chosen using historical data and context.

### ISM Transitions as "What's Next" Predictions

Each ISM transition predicts the next state within the graph structure.

### PromiseGrid as an ISM

PromiseGrid operates as an ISM, leveraging its capabilities for dynamic and reliable sequence management.
```
EOF_/home/stevegt/lab/grid-cli/v2/doc/201-ism.md