Here are the requested revisions to the documentation. 

File: /home/stevegt/lab/grid-cli/v2/doc/README.md
```markdown
## PromiseGrid v2 Documentation

### Table of Contents

1. [Introduction](#introduction)
2. [Design Notes](#design-notes)
3. [Module Integration](#module-integration)
4. [Capability Tokens](#capability-tokens)
5. [Data Flow and Sequence Matching](#data-flow-and-sequence-matching)
6. [Inter-Process Communication (IPC)](#inter-process-communication-ipc)
7. [Sequence Graphs](#sequence-graphs)
8. [Hybrid DHT and Open Market](#hybrid-dht-and-open-market)
9. [Persisting the Trie to Disk](#persisting-the-trie-to-disk)
10. [Advanced Configuration](#advanced-configuration)

### Design Notes

Includes detailed notes on the design philosophy and architectural principles guiding PromiseGrid. 

- [Design Overview](./doc/00.md)
- [Discussion Notes](./doc/01.md)

### Module Integration

Discusses strategies for effective module integration, ensuring modular, flexible, and decentralized processing.

- [Cache and Module Handling](./doc/02.md)
- [Advanced Discussions](./doc/03.md)
- [Module Integration Concepts](./doc/04.md)

### Capability Tokens

Details the use and implementation of self-contained capability tokens in PromiseGrid. Tokens manage permissions and identity securely.

- [Capability Tokens and Prior Art](./doc/150-capability-tokens.md)

### Data Flow and Sequence Matching

Explores the techniques of sequence matching, data structures like tries and graphs, and their applications.

- [Introduction to Sequence Matching](./doc/200-sequence.md)
- [Graph or Node-Based Representation](./doc/210-sequence-graph.md)

### Inter-Process Communication (IPC)

Inter-Process Communication is critical for a microkernel architecture, facilitating communication between various modules or components within the PromiseGrid.

- [IPC in PromiseGrid](./doc/320-ipc.md)

### Sequence Graphs

Details on implementing sequence matchers using graph-based structures within PromiseGrid.

- [Sequence Matching Implementation](./doc/220-graph.md)
- [Advanced Sequence Matching Concepts](./doc/221-graph.md)

### Hybrid DHT and Open Market

Combines DHT with an open market system to leverage decentralized storage and lookup efficiency.

- [Hybrid DHT and Market Design](./doc/343-dht.md)
- [Pure Market Design](./doc/344-market.md)

### Persisting the Trie to Disk

Describes various options for persisting the trie data structure to disk within PromiseGrid.

- [Decentralized Trie](./doc/345-dtrie.md)
- [Persistence Strategies](./doc/346-persist.md)
```
EOF_/home/stevegt/lab/grid-cli/v2/doc/README.md

File: /home/stevegt/lab/grid-cli/v2/doc/320-ipc.md
```markdown
# Inter-Process Communication (IPC) in PromiseGrid

## Introduction

Inter-Process Communication (IPC) is a critical aspect of any microkernel architecture, facilitating communication between various modules or components. This document explores common microkernel IPC patterns and their implementation within the PromiseGrid microkernel.

## Common Microkernel IPC Patterns

### 1. Message Passing

**Pattern**: In many microkernel systems, IPC is implemented using message passing. Processes or modules communicate by sending and receiving messages through well-defined interfaces.
- **Example**: The Mach microkernel uses message-passing IPC to facilitate communication between different parts of the system.

**In PromiseGrid**:
- The PromiseGrid microkernel employs a message-passing IPC mechanism. Messages in PromiseGrid are encapsulated in structures that include parameters (parms), a leading promise hash, and a module hash.
- This design facilitates efficient and secure communication between modules, aligning with PromiseGrid’s decentralized and modular architecture.

### 2. Shared Memory

**Pattern**: Shared memory allows multiple processes to access the same memory space, enabling fast data exchange.
- **Example**: Systems like QNX use shared memory as a high-performance IPC mechanism in certain situations.

**In PromiseGrid**:
- While shared memory is not the primary IPC mechanism in PromiseGrid, caches treated as shared resources can be conceptually aligned with this pattern.
- Modules in PromiseGrid can cache results, which are then accessible to other modules, facilitating efficient data sharing while maintaining modularity.

### 3. Remote Procedure Call (RPC)

**Pattern**: RPC involves executing a procedure (subroutine) on a remote server or component as if it were a local call. This abstracts the details of communication, providing a simple interface for IPC.
- **Example**: The L4 microkernel and other similar systems use RPC for IPC.

**In PromiseGrid**:
- Message handling in PromiseGrid can be seen as a form of RPC. Each message includes a hash that identifies the module and procedure to be executed. The kernel routes the message to the appropriate module based on these hashes.
- This aligns with PromiseGrid’s promise-based interactions, encapsulating functionality and communication in promise messages.

## PromiseGrid Microkernel: A Message-Passing System?

### Is PromiseGrid a Message-Passing Microkernel?

Yes, the PromiseGrid microkernel is a message-passing system. It primarily uses messages to facilitate communication and coordination between nodes and modules in the grid.

### Message Format Comparison

1. **Internal IPC Messages**:
   - Messages used for internal IPC in the PromiseGrid microkernel include a leading promise hash, a module hash, and parameters (parms).
   - **Structure**: 
     ```json
     {
       "promiseHash": "<promise-hash>",
       "moduleHash": "<module-hash>",
       "parms": ["<param1>", "<param2>", ...]
     }
     ```
   
2. **External Network Messages**:
   - Messages exchanged over the network between PromiseGrid nodes are similarly structured and may include additional metadata for routing and security.
   - **Consistency**: The internal IPC messages and network messages maintain a consistent format, simplifying the translation and handling of messages as they traverse nodes.

### Integration with Broader Concepts

1. **Promises All the Way Down**:
   - Both IPC and external network messages in PromiseGrid are promise-based. This ensures a unified model for interaction, governance, and communication.
   - **Unified Handling**: The system treats every interaction as a promise, ensuring a consistent and trustworthy communication framework.

## Conclusion

The PromiseGrid microkernel leverages common IPC patterns, primarily using message passing to facilitate communication between modules. By incorporating promise-based interactions and maintaining a consistent message format both internally and over the network, PromiseGrid ensures efficient and secure module coordination. This design aligns with the principles of decentralized governance and modularity, ensuring a robust and flexible system architecture.
```
EOF_/home/stevegt/lab/grid-cli/v2/doc/320-ipc.md

File: /home/stevegt/lab/grid-cli/v2/doc/347-dtrie.md
```markdown
### Treating Lazy-Loading from Disk and Network 

In the PromiseGrid system, lazy-loading a node from disk should be treated the same as lazy-loading a node from a remote host over the network; both are IO-bound operations. 

- In both cases, an in-memory trie miss generates a call via the kernel.
- The kernel handles disk and network I/O.
- The trie code does not import any OPFS or `afero` library; file and network I/O are the responsibility of other microkernel services.

This approach ensures that the trie code remains focused on its primary responsibility—efficiently managing in-memory trie data structures—while delegating I/O operations to dedicated microkernel services. This separation of concerns leads to cleaner, more maintainable code and leverages the existing microkernel services for handling diverse I/O operations.
```
EOF_/home/stevegt/lab/grid-cli/v2/doc/347-dtrie.md